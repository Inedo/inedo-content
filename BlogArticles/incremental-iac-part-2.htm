<!DOCTYPE html>
<html>
<head>
    <meta name="keywords" content="incremental, infrastructure as code, servers, otter" />
    <meta name="publish-date" content="06/14/2016 8:00 AM" />
    <meta name="author" content="Olivia Glenn" />
    <title>How to finally modernize a DevOps Toolchain: Infrastructure as Code: Part Two</title>
    <meta name="no-image" content="/blog/_resources/blog-banner.png" />
</head>
<body>
    <h1>Part Two | Practice makes Perfect</h1>
    <p>
        Testing, testing, testing, and more testing. Lets get this show on the road!
    </p>
    <p>
        <strong>
            If you missed the introductory post to the series,
            check it out <a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code">here</a>,
            and you can find <a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code-part-one">part one here</a>.
        </strong>
    </p>

    <img src="/blog/_images/iac/step-threeo.png" />
    <h4 style="text-align: center"><br /><i>3-24 hours</i><br /></h4>
    <p>
        Tools are a critical piece of a DevOps solution and, by this stage, you should have a <a href="#shortlist">short list</a> of them that seem to be suitable for 
        both the selected server and your enterprise at a whole. Now's the time to dig in a little deeper to see which will be worth a more time-intensive proof-of-concept.
    </p>
    <p>
        If you were shopping for cars, this would be the equivalent of a test drive around the block. If that's too bumpy of a drive, or you
        just really hate driving stick shift, then it's simply not worth taking the car home for the entire weekend.
    </p>
    <p>
        Some tool vendors offer a self-guided tutorial that you can use after a download, whereas others will have salespeople give
        a live web demonstration. Both types of assessments should take about the same time (1-2 hours), and both should  accomplish the same goal: not necessarily
        finding which tool will be "the one", but finding which tools will definitely not.
    </p>
    <p>
        When doing a self-guided tutorial, make sure not to conflate the assessment with the next stage, the proof of concept. The
        assessment should be focused on finding an overall solution, not the server selected in the first stage.
    </p>
    <p id="shortlist" >
        To make this step easier, here's a comprehensive list of the top Infrastructure as Code Tools as of 2016.
    </p>
    <ul style="margin: 40px 0 40px 70px;">
        <li><a href="https://www.ansible.com/tower">Ansible Tower</a></li>
        <li><a href="https://cfengine.com/">CFEngine</a></li>
        <li><a href="https://www.chef.io/chef/">Chef</a></li>
        <li><a href="/otter">Inedo's Otter</a></li>
        <li><a href="https://puppetlabs.com/">Puppet</a></li>
        <li><a href="http://saltstack.com/enterprise/">SaltStack Enterprise</a></li>

    </ul>
    <img src="/blog/_images/iac/step-four.png" />
    <h4 style="text-align: center"><br /><i>16-40 hours</i><br /></h4>
    <p>
        If the assessment was a test drive around the block, then the proof of concept is loading up the car with your family and pets, and then
        taking a road trip. At this stage, it's not just about finding the right tool, but discovering and defining the processes you'll use around the tool.
    </p>
    <p>
        Because this will interact with the various servers that are in this role (and it's important to demonstrate actual value to production, or as close as possible),
        there will be slight risk involved. The tools will need to be installed, firewall ports may need to be opened, permissions and service
        accounts may need to be created, and so on. However, this slight risk comes with a fair reward: it'll give a feel for what is
        actually required to start automating your infrastructure and it server configuration.
    </p>
    <p>
        To mitigate some of this risk, the proof-of-concept may be split into two phases:
        pre-production and production. Only upon completion of the first phase would the proof-of-concept be allowed to continue to the second.
    </p>
    <p>
        An organizational change is as much one of hearts and minds as it is the tooling and processes. This stage will also give you a feel as
        to the resistance and hesitation to change, as well as any perceptual leaps that need to be made.
    </p>
    <p>
        Thus, it's equally important to involve and interact with the actual people who configure the infrastructure: testers,
        business analysts, network engineers, developers, etc. Just as the risk to automation can be mitigated with a multiphase
        proof-of-concept, so can overcoming the resistance to change: only upon completion of one phase of the proof-of-concept
        would the solution be introduced to another person or team.
    </p>

    <h4><a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code">The Intro</a></h4>
    <h4><a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code-part-one">Part One</a></h4>
    <h4><a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code-part-three">Take me to Part Three!</a></h4>

    <div style="border: 2px solid #4A536D; padding: 10px 30px; margin: 30px 0; font-size: 75%; font-weight: bolder;">
        <p><strong>Check out Inedo's Infrastructure as Code Tool</strong></p>
        <hr />
        <p>
            <a href="/otter">Otter</a> is a modern infrastructure automation tool, both visually and functionally, that utilizes Infrastructure as Code to help teams and
            enterprises with server management &amp; orchestration automation.
        </p>
        <p>
            <i>Don't wait! Read the entire incremental approach now! </i><br /><br /><a href="/promos/incremental-infrastructure">Download</a> the
            full guide <strong>Incremental: Infrastructure as Code</strong> for FREE.
        </p>
    </div>

</body>
</html>