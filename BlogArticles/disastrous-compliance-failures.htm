<!DOCTYPE html>
<html>

<head>
    <meta name="keywords" content="DevOps, BuildMaster, compliance, deployment, builds" />
    <meta name="publish-date" content="2/12/2019 1:15 PM" />
    <meta name="author" content="Marisa Vesel" />
    <title>The Top 4 Most Disastrous Compliance Failures-And How to Avoid Them</title>
    <meta name="no-image" />
</head>

<body>
    <h1 style="margin-top: 20px;"><strong>The Top 4 Most Disastrous Compliance Failures-And How to Avoid Them</strong></h1>

    <p>
    Everyone knows compliance issues are very important. However, these issues can be time-consuming and frustrating; which makes them easy to ignore until itâ€™s too late. Failing to take compliance issues seriously can result in major consequences such as data breaches, audit failures, and decreasing brand reputation.
    </p>
    <p>
      If you think you may have compliance issues in your organization, read up on our top 4 compliance failures-and how they can be avoided!
    </p>

    <h2>Deploying to the Wrong Environment-Build Ends Up in the Wrong Hands</h2>
    <p>Builds constantly move between different testing environments, and manual deployments require humans to keep track of what goes where. That often results in a mess of hand-written notes, person to person emails, and even verbal communication that has no record whatsoever and just relies on pure memory.</p>
<p>There is no way to ensure that something doesn't fall through the cracks in this game of telephone. Notes get lost, handwriting can't be read, people misremember what was said &mdash; all of it compounds to create a situation where the potential for errors in what build is moved into what environment is high.</p>
<p>The combination of all these ad hoc communications and reporting methods results in a very high-risk situation. For example, someone can misread their handwriting and end up deploying a build into the wrong environment by mistake, which in-turn reveals sensitive information in the build to unauthorized parties that can see into the (incorrect) environment. Now we potentially have a lawsuit on our hands &mdash; and all because someone misread a note they scribbled just before they went on a coffee break two weeks ago.</p>
<p>DevOps automation allows you to use the software to define which environments a build should deploy into. In contrast to the mess of human communications, the software thereby ensures a build's deployment instructions remain visible throughout the testing and production lifecycle. No matter how many times the build cycles through testing stages or environments, there is no chance for something to get misheard, mis-recorded, or misread.</p>

<h2>Lack of Secrets Protection Leads to Vulnerable Data</h2><p>Organizations are the safeguards of a lot of confidential and sensitive information, and when there is not an emphasis on keeping this information private, it can end up in the wrong hands. When this information is easy to access, it can lead to detrimental consequences. A lack of security in secrets protection can lead to sensitive data becoming valuable. This means passwords can be written down on loose pieces of paper, stored in an all-access drive, or spoken in common areas. This results in confidential or sensitive data being accessible to too many people.</p>
<img src="/blog/_images/post-conf/secrets.png" />
<p>This lack of regard for taking safeguards to protect sensitive information is a high-risk action that can result in the data becoming compromised. If passwords and access to data are easy to obtain, then this opens the door for the data being leaked or breached.</p>
<p>For example, if a junior developer stumbles upon a password for a consumer database through an all-access drive and accesses the database only to accidentally make this information public; then there's quite a mess to clean up. There's a decrease in brand reputation, company trust, and the potential for a lawsuit.</p>
<p>Implementing DevOps tools allows you to use the software to make data available only to certain parties by restricting internal use. Higher managers in the company will have the opportunity to grant access only to certain parties using the user dashboard. This means that rather than being password protected, access is simply not visible to some employees without permission.</p>
<p>This leaves no room for passwords to fall into the wrong hands, decreasing the risk of accidental and malicious compromised data.</p>

<h2>Lack of Governance and Approval Leads to Early Deployment</h2>
<p>Builds are constantly being changed as they go through testing, but manual deployment processes often don't have any clearly defined signal to indicate a build is ready to go to production. In other words, too much autonomy in the workplace can lead to the absence of any approval process whatsoever in the deployment lifecycle. If builds do not have to be approved at any point before deployment, there's nothing stopping any developer from "deciding" on their own that the build is "finished" at any point.</p>
<img src="/blog/_images/post-conf/early-deploy.png" />
<p>For example, if someone makes a change to the website or application and there is no approval process, then anyone is able to deploy software at any time, regardless of whether it actually meets the required specifications.</p>
<p>Having a free-for-all deployment process can lead to deployments before changes are ready to be released to the public, changes haven't been documented or tested, or the deployer simply doesn't have a full understanding of the changes. When builds are deployed too early, this can result in a large clean-up process to fix the mistakes; such as retroactively fixing bugs or releasing a statement about why a release was made public too early.</p>
<p>Automating processes can integrate Approval Gates into the development lifecycle, as well as restrict privileges of certain actions only to specific users. This means that deployments cannot move forward without human approval and can only be moved forward by certain users. This reduces the risk of premature deployments and makes sure that deployments are not being moved forward just based on one person's decision.</p>

<h2>A Build is Deployed with Unresolved Issues Still Present</h2>
<p>When building new software, issues are likely to arise throughout the process, but unfortunately, these issues can sometimes be hard to catch. During manual deployments, humans are responsible for ensuring issues are fixed by running issue trackers and documenting their process. Humans are susceptible to errors and relying on them to ensure these steps are completed can be risky. Without proper issue tracking and documentation, builds can be deployed before all issues are resolved.</p>
<p>If a build is deployed with unresolved issues, then the errors must be fixed retroactively. This can require a lot of time and resources and is an all-around inefficient process. If issues are resolved but not documented, then the resolving of these issues may be reassigned. When a developer goes to resolve an issue that doesn't really exist, they may end up breaking the entire build on their quest to fix the problem.</p>
<p>Integrating DevOps tools with issue trackers, such as JIRA, TFS, or YouTrack, will allow issues to be tracked and fixed before deployment occurs. Automating this process will ensure that issues are resolved and documented. People will no longer have to work back and forth between various deployment, software, and issue tracking tools; reducing the risk of human errors. Additionally, there will be clarity in the process as developers will see what issues have been resolved and where in the process they were fixed.</p>

<h2>Want to Learn More About How Inedo Can Help?</h2>
<p>Implementing DevOps tools into your company can help make compliance a breeze! From managing and reporting compliance becoming easier to increased compliance and security checks throughout; compliance no longer has to be pushed to the backburner. When compliance is not taken seriously, consequences for the company are dire; including large fees, declining reputation, and loss of consumer trust.</p>
<p>To learn how to start taking compliance seriously so you can avoid unnecessary headaches down the line, contact us at: <a href="mailto:mgoulis@inedo.com?subject=Follow%20up%20to%20Disastrous%20Compliance%20Failures">mgoulis@inedo.com</a>.</p>
</body>

</html>
