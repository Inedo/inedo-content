<!DOCTYPE html>
<html>
<head>
    <meta name="keywords" content="buildmaster, variables" />
    <meta name="publish-date" content="03/17/2015 6:00 PM" />
    <meta name="author" content="Olivia Glenn" />
    <title>Common Uses for Variables</title>
    <meta name="full-image" content="/blog/_images/blog-bm-banner.png" />
</head>
<body>
    <h1>Common Uses for Variables</h1>
        <p>
            When used in different ways, <a href="/support/documentation/buildmaster/deployment-automation/deployment-plans/variables" target="_blank">
            BuildMaster variables</a> can be an extremely powerful tool in creating an automated, repeatable deployment process. 
            The following are some common uses for variables.
        </p>

    <h2>Setting a global constant for use anywhere in BuildMaster</h2>
         <p>
            Yes, a "constant variable" is an oxymoron, but you can use System variables to create a key/value pair that can be replaced throughout the whole system.
        </p>

    <h2>Pulling code from different branches</h2>
        <p>
            There are two fundamental branching strategies that can be used to develop software: branch by exception 
            (e.g. a new release/feature branch and merge into trunk for deployment) and branch by rule (e.g. deployed branch becomes the new trunk). 
        </p>
        <p>
            To support these patterns within BuildMaster, a Release variable can be used to determine which branch to build from. For example, 
            in your Get Latest from source control action, you can use variables in the source path to pull from a branch. 
            When building BuildMaster extensions, we use the following: Get latest from "bmx-%APPNAMELOWER%|%BUILD-SOURCE%:", 
            where BUILD-SOURCE is a release variable that points to the branch on GitHub to build.
        </p>

    <h2>Optional behavior during a particular execution</h2>
        <p>
            There are times during deployment scenarios where a certain group of actions only needs to be run sometimes. 
            This can be accomplished with really any scope of variable, but must commonly either a Build variable or a Promotion variable. 
            Combined with a "Variable Value" predicate on an action group, that group will only execute its actions if the variable is set for 
            your particular build, promotion, release, or whatever scope the variable happens to be.
        </p>
        <p>
            Note that running certain action groups during an execution can also be accomplished with a combination multiple 
            <a href="/support/documentation/buildmaster/core-concepts/releases/deployables" target="_blank">deployables</a> and 
            <a href="/support/documentation/buildmaster/deployment-automation/deployment-plans/action-groups" target="_blank">predicates</a>, 
            but deployables should represent individual components of your application and not "optional" behavior such as the examples listed below.
        </p>
        <p>Typical examples of this scenario include:</p>
            <ul>
                <li>rebuilding the integration database from scratch on a build to integration</li>
                <li>restoring a database from production when building to integration</li>
                <li>determining whether the code was pulled from a branch</li>
                <li>whether to run unit tests or not </li>
            </ul>

    <h2>Setting the build configuration for your project for each build</h2>
        <p>
            With a Build variable for example, you could change the behavior of MSBuild to set the build configuration to the variable %BUILD-CONFIG%, 
            whose value is selected from a dropdown at build time to either "Debug" or "Release", which in turn would build that configuration in the 
            Integration environment. Combined with a "Variable Value" promotion requirement, you could block promotion beyond Testing for example, 
            unless that value is set to "Release" to ensure that Debug builds never make it out of your testing environment.
        </p>

    <h2>Changing a path for a particular server in a server group</h2>
        <p>
            When deploying to server groups, it's possible that one of the servers is a "one-off" with a different deployment path or configuration. 
            By setting a Server variable, you could control the path on that single server by overriding the default value of that variable just for that server.
        </p>

    <h2>Auto-deployment to the next environment</h2>
        <p>
            With the Auto-Promote Build trigger, BuildMaster can promote a build to the next environment automatically by checking the 
            value of a variable to determine if it should do so.
        </p>

    <h2>… anything!</h2>
        <p>
            Variable types and editors are extensible and can be created custom to fulfill whatever variable deployment scenario you can imagine.
        </p>

   
</body>
</html>