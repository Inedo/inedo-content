<!DOCTYPE html>
<html>
<head>
    <meta name="keywords" content="incremental, infrastructure as code, servers, otter" />
    <meta name="publish-date" content="05/18/2016 8:00 AM" />
    <meta name="author" content="Olivia Glenn" />
    <title>How to finally modernize a DevOps Toolchain: Infrastructure as Code: Part One</title>
    <meta name="no-image" content="/blog/_resources/blog-banner.png" />
</head>
<body>
    <h1>Part One | Decision making time</h1>
    <p>
        You always have to start somewhere, so lets get this incremental train rolling.
    </p>
    <p>
        <strong>
            If you missed the introduction post to our Incremental Infrastructure as Code series,
            check it out <a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code">here</a>.
            After you finish reading part one, you can find part two <a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code-part-two">here.</a>
        </strong>
    </p>
    <img src="/blog/_images/iac/step-one.png" />
    <h4 style="text-align: center"><br /><i>4-8 hours</i><br /></h4>
    <p>
        Look for any teams or groups expressing interest in tackling Infrastructure as Code, and ideally pick a role that impacts their applications.
        It’s likely the path of least resistance amongst your personnel, and will maximize the likelihood of buy-in, cohesion, willingness to experiment, and ultimately, change.
    </p>
    <p>
        The initial server role shouldn’t be technically overwhelming from a configuration standpoint, while at the same time it shouldn’t be considered low priority
        (otherwise, the value of Infrastructure As Code won’t be visible), nor should it be the flagship server (too much perceived change at once). And most
        importantly, both your development and operations team responsible for the server role should buy-in and understand the importance of DevOps.
    </p>
    <div style="border: 2px solid #4A536D; padding: 10px 30px; margin: 30px 0; font-size: 75%; font-weight: bolder;">
        <p><strong>Server Roles: Defined</strong></p>
        <hr />
        <p>
            Server Roles help define common configuration between servers. They model the real-world overlap
            of servers, and provide the visualization necessary to easily understand your infrastructure.
            Server Roles facilitate the flexibility needed to address the complexities that modern infrastructure  automation poses.
        </p>
        <p>
            For example, you may have an iis-server role that ensures IIS is configured in a particular way, as well as hdar-api-host that ensures
            a particular web application is configured properly. Both roles can be applied to the same server so that hdar-api-host is configured on an IIS server.
        </p>
        <p>
            Like applications, a single server role will span multiple servers across multiple environments (integration, QA, production), and
            are used in conjunction with the  testing process.
        </p>
    </div>
    <img src="/blog/_images/iac/step-two.png" />
    <h4 style="text-align: center"><br /><i>6-16 hours</i><br /></h4>
    <p>
        You can generally accomplish step two in a single meeting, as the types of server configuration should already be well-known by the key development
        and operations personnel within your enterprise.
    </p>
    <p>
        Although there’s certainly no DevOps in a Box, (we've been there) the closest thing to a solution is a software product/tool, a process
        built around the platform, and a plan to implement both the software and process. Your objective in this stage is to find solutions that would not just work for the
        selected server role, but that might, at least theoretically, work for other servers and servers roles in your organization. For
        instance, if your enterprise has a mix of Windows and Linux servers, then using only a Linux solution should be a nonstarter.
    </p>
    <div style="border: 2px solid #4A536D; padding: 10px 30px; margin: 30px 0; font-size: 75%; font-weight: bolder;">
        <p><strong>Server Configuration: Defined</strong></p>
        <hr />
        <p>
            Generally speaking configuration describes the packages, settings, files, or anything thing else that is on a server. For example, an
            Application Pool that’s configured in IIS (along with any of the three dozen settings) would be considered configuration.
        </p>
    </div>
    <p>
        Just because the enterprise’s servers are configured differently, there will be a lot of  overlap in their configuration process. By
        the same token, just because two servers have similar IIS configuration, the process could be vastly different: for instance, a
        marketing website generally needs a lot less testing and scrutiny than stock trading API middleware.
    </p>
    <p>
        It may seem like a lot to take in, but to reiterate, your goal is to find something that “might, at least theoretically, work.”
        Now is not the time to craft a 20-page requirements document with a spreadsheet detailing each and every possible technical
        and process specification. There’s simply no way of actually knowing each and every server’s configuration without spending
        significant time with each and every group to learn their technical requirements, so this initial organizational consideration
        must be done at a very high, almost “gut” level.
    </p>
    <p>
        Step three can largely be performed by your implementation team, although brief interactions with development and
        operations teams may be needed to confirm technical requirements.
    </p>
    <h4><a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code">The Intro</a></h4>
    <h4><a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code-part-two">On to Part Two!</a></h4>
    <h4><a href="/blog/how-to-finally-modernize-a-devops-toolchain-infrastructure-as-code-part-three">I want to read these out of order, to Part Three!</a></h4>

    <div style="border: 2px solid #4A536D; padding: 10px 30px; margin: 30px 0; font-size: 75%; font-weight: bolder;">
        <p><strong>Check out Inedo's Infrastructure as Code Tool</strong></p>
        <hr />
        <p>
            <a href="/otter">Otter</a> is a modern infrastructure automation tool, both visually and functionally, that utilizes Infrastructure as Code to help teams and
            enterprises with server management &amp; orchestration automation.
        </p>
        <p>
            <i>Don't wait! Read the entire incremental approach now! </i><br /><br /><a href="/promos/incremental-infrastructure">Download</a> the
            full guide <strong>Incremental: Infrastructure as Code</strong> for FREE.
        </p>
    </div>

</body>
</html>