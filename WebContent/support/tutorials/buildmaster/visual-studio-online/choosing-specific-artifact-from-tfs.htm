<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <title>Choosing a specific TFS / Visual Studio Online Build with BuildMaster</title>
	  <meta name="keywords" content="buildmaster, tfs, visual-studio-online, builds, source-control, experienced-user, import " />
	  <meta name="include-client-resources" content="fancybox131" />
       <meta name="product-name" content="BuildMaster" />
   </head>
   <body>
       <div class="intro">
           <p>
               BuildMaster is an application release automation tool. In this tutorial, we will demonstrate how to select a specific build in Visual Studio Online, and pull a release package from that build.
           </p>
           <hr />
       </div>

       <p>Previously we ran through how to kick off a <a href="/support/tutorials/buildmaster/visual-studio-online/queuing-and-deploying-artifacts-from-tfs">new build in TFS / VSO and then import that build into BuildMaster</a>. This is the way most of our users integrate TFS, or any CI engine with BuildMaster, however there is another feature that some users take advantage of.</p>

		<p>
            In this tutorial, we’ll set up a new <a href="/support/documentation/buildmaster/core-concepts/pipelines">pipeline</a> for the application we’re pulling from TFS so that we can pick a specific past build to import.
      </p>
       <p class="info">
           You can <a href="\support\tutorials\_examples\vso-2.zip" download="vso">download</a> the sample Otterscript plan and JSON files used in this tutorial.
       </p>

	  <h3 id="step-one">Step 1: Create a new Pipeline</h3>
		<p>
            BuildMaster allows, and encourages, users to create multiple pipelines for their applications to cover a host of release scenarios. We’ll name this pipeline Import Specific Build, as well as give it a color to clearly identify it as a non-standard pipeline.
		</p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\new-pipeline2.png" />
		<p>
            This new pipeline will mirror the standard pipeline stages of Import, Integration, Testing, and Production from the previous tutorial.
        </p>
        <p>
            On that same note we’ll also use the same <a href="/support/documentation/buildmaster/core-concepts/deployment-plans">deployment plan</a> for Integration, Testing, and Production. Of course we can also add any <a href="/support/documentation/buildmaster/core-concepts/pipelines">gates</a>, and <a href="/support/documentation/buildmaster/global-components/event-listeners">event listeners</a> as needed.
		</p>



       <p><h3 id="step-two">Step 2: Create a Release Template</h3></p>
       <p>
           We’ll next set an application variable and use that variable in a <a href="http://inedo.com/support/documentation/buildmaster/core-concepts/release">Release Template</a>, which will allow us to pick a specific build definition, and build number.
        </p>
       <p>
           First, we'll set the application level variable. This variable will set <i>$TfsProject</i> to the specific Project in TFS we're working with. In this case, Accounts. You set application variables under the <i>settings</i> tab.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\applicaion-variable.png" />

       <p>
           We’ll then create our release template, name it, and set it to the new pipeline.
       </p>
       <p>
            First, we'll add a Release Variable to pick which build definition we want. We'll name it <i>TfsBuildDefinition</i>, and make sure that the value is required and limited to items in list. We'll choose Dynamic List (TFS Build Definition), and set our credential and use the application variable ($TfsProject) as its type.
        </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\build-definition.png" />
        <p>
           Next, we'll add a Package Variable to our template that will allow us to pick a specific build number. Again, the value will be required and restricted to list items. We'll name this variable <i>TfsBuildNumber</i> and it will also be a Dynamic list (TFS Build Number). Again, we'll set our credentials, use $TfsProject, and this time we'll use the variable we just set for the build definition ($TfsBuildDefinition).
        </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\build-number.png" />
       <p>
           Also, we'll make sure that the value is required, and also limited to items in the list.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\build-number-variable.png" />
       <p>
           We now have a release template that, when used, will prompt us for a build definition and a specific build number. Next, we'll use these variables in a new deployment plan.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\release-template2.png" />
       <p><h3 id="step-three">Step 3: Create a new Deployment Plan</h3></p>

       <p>
           Even if we’re using a previously defined deployment plan to move the application through the new pipeline, we still need to import the build, and we need a new plan for that. We’ll name the plan Import Previous Build.
       </p>
       <p>
           This new plan will start with a General block and short description, and then add two operations, <b>Import Artifact from TFS</b>, and <b>Set Release Package Number</b>. The first operation will let us select a build to import using our variables.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2/import-plan2.png" />
       <p>
           The second will let us set the package number. We'll use the $TfsBuildNumber variable so that the package number is the same as the build number.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2/set-package-number.png" />
       <p class="info">Please note that if you choose to set the package number to the same number as the build in TFS you may also need to change the <i>Package Number Scheme</i> to <i>Date-based</i> (which can be found under advanced settings) in certain situations. This allows for a package name to be reused in the same release.</p>
       <p>We will then save and assign this new plan to the Import stage of our pipeline, and select the stage to automatically promote to the next stage of the pipeline, Integration.</p>
       <img class="screenshot" src="\resources\tutorials\vso-part2\new-stage2.png" />



       <p><h3 id="step-four">Step 4: Create a new Release</h3></p>
       <p>
           Now that the new pipeline, plan, and template are in order we can create a new release using them.
        </p>
        <p>
           We’ll create a new release, and set the template and pipeline to Import Specific Build. We'll also have a drop-down to choose our Build Definition, in this case <i>Standard</i>.
        </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2/create-release2.png" />
       <p>
           When we create our package another prompt will appear for the Build Number.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2/release-build-number.png" />
       <p>
           Once set, BuildMaster will then import the build number specified and the release package can be moved through the rest of the pipeline.
       </p>
       <img class="screenshot" src="\resources\tutorials\vso-part2/imported.png" />

       <div id="related-content" class="content">

           <hr />
           <div class="button-set">
               <a href="/buildmaster/download" class="button">Download BuildMaster</a>
               <a href="/" class="button">Other Inedo products</a>

           </div>
       </div>
    </body>
</html>
