<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>BuildMaster GitLab Operations Tutorial</title>
    <meta name="keywords" content="buildmaster, github, continuous integration, entry-user" />
      <meta name="include-client-resources" content="fancybox131" />
    <meta name="product-name" content="BuildMaster" />
</head>
<body>
        <div class="intro">
        <p>
            BuildMaster is an application release automation tool. In this tutorial, we'll be putting together a setup that shows how to use various GitLab operations within BuildMaster. 
            </p>
            <p>
            If you'd like to follow along step-by-step, you can use a personal project repository. For this tutorial, we will be using a repository called Accounts that was created just for testing purposes.
        </p>
       <hr />
    </div>
    
    
    <h2 id="gitlab-setup">GitLab Installation and Setup</h2>
    <p>&nbsp;</p>
    <h3 class="step-1">Step 1: Install and Configure Extensions</h3>
    
    <p>Go to the Administration page by clicking the gear symbol in the upper left-hand corner and then click the on <strong>Extensions</strong>.</p>
    
    
    
    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/extensions.png" />

    <p>
        For this tutorial we will be installing the <strong>GitLab</strong> extension. Scroll down the extensions page and install the extension.
    </p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/den-gitlab.png" />

    <p>After the extensions are installed, BuildMaster will automatically restart, and the GitLab plugin will now be in the Up-to-Date Extensions.</p>
    <p>Back on the Admin page, click <strong>Resource Credentials</strong>, and then click the <strong>Create Credential</strong> button. A window will pop up, asking you to select a credential type, select <strong>GitLab</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/gitlab-credential.png" />

    <p>We'll create a GitLab resource credential by filling out appropriate fields like<i> Name, Project, User name and Personal access token</i>.</p>

    <p class="info">
        <strong>Note:</strong> The GitLab API requires that the user sets up a form of authentication in order to establish API access. More info on setting this up can be found here: <a href="https://docs.gitlab.com/ee/api/#authentication" target="_blank">https://docs.gitlab.com/ee/api/#authentication</a>
    </p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/edit-credential.png" />
    <p>&nbsp;</p>
    <h3 id="step-2">Step 2: Create an Application</h3>
    
    <p>Click on <strong>Applications</strong>, then click the <strong>Create Application</strong> button. This will bring up a window, where you will set the name to <strong>Accounts</strong>. When creating the application, the <i>Integration</i>, <i>Testing</i>, and <i>Production</i> environments will be added by default as the initial pipeline. When finished, click <strong>Create</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/create-application.png" />
    <p>&nbsp;</p>
    <h3 id="step-3">Step 3: Setting up GitLab as an Issue Source</h3>
    
    <p>Now that the Accounts application has been created, we can set GitLab as an issue source for BuildMaster by going to the <strong>Administration </strong>page. Click on <strong>Issue Sources</strong> from this page.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/components-extensibility.png" />

    <p>Next, click on <strong>GitLab Issue Source</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/select-issue-source.png" />

    <p>From here we are able to enter a Source name, set to run for the <strong>Accounts </strong>application and also set the Credentials to the <strong>GitLab </strong>resource credentials that we set up earlier. When finished, click Save Issue Source.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/save-issue-source.png" />
    <p>&nbsp;</p>
    <h3 id="step-4">Step 4: Create a New Build Plan</h3>
    
    <p>Create a plan by clicking the <strong>Create Plan</strong> button and name the plan <strong>GitLab Account</strong>.</p>
    <p>First, add a <strong>General Block</strong> and keep the default settings. Feel free to add a short description, like "GitLab Operations."</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/general-block.png" />

    <p>Next, we'll add a <strong>Get Source from GitLab Repository</strong> operation that will pull the latest files from a GitLab repository and store them in a temporary workspace called <i>$WorkingDirectory</i>. We'll use the GitLab resource credential we've already created.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/get-source.png" />

    <p>Before saving this operation, let's specify the project name. This can be done by selecting the directory through a drop-down menu of choices within the <strong>GitLab tab</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/edit-get-source.png" />

    <p>Let's also store the commit ID into a variable. This can be done in the <strong>Advanced </strong>tab of this operation. For this project, we will just name this variable as <strong>$commitID</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/commit-id.png" />

    <p>Now, we'll add a <strong>Set Release Variable</strong> operation, where you can add a build variable name and value. We will just be setting the value to commitID (where the commit hash was previously stored) in order to store the commit ID within this release variable.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/release-variable.png" />

    <p>Lastly, we will use the <strong>Tag GitLab Source</strong> operation. We will specify the credentials as well as a name for the tag.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/tag-source.png" />

    <p>Again, before saving let's specify the project name. This can be done by selecting the directory through a drop-down menu of choices within the <strong>GitLab tab</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/edit-tag-source.png" />

    <p>Let's also store the commit ID into a variable. This can be done in the <strong>Advanced </strong>tab of this operation. For this project, we will just name this variable as <strong>$commitID</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/tag-source-commit-id.png" />

    <p>If done correctly the plan will look like the image below:</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/visual-view.png" />

    <p>And in text mode:</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/text-view.png" />
    <p>&nbsp;</p>
    <h3 id="step-5">Step 5: Edit Application Pipeline and Set Build Plan</h3>
    
    <p>When we created the application, a simple pipeline was also created which we can now edit. Click on <strong>Accounts </strong>and then click on the <strong>Pipelines </strong>tab. Finally click on the <strong>Add Stage</strong> button.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/add-stage.png" />

    <p>Set Name to <strong>Build</strong>, then set <strong>Pipeline position to 0</strong> and Click <strong>Save Stage</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/save-stage.png" />

    <p>We'll add a target to the Build stage using our build plan (GitLab Operations) and our local server.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/add-target.png" />
    <p>&nbsp;</p>
    <h3 id="step-6">Step 6: Creating a Release and Deploying</h3>
    
    <p>After setting the build target, we will create a <strong>Release</strong> that builds and deploys this plan. The release number can be anything, but defaults to 0.0.0.</p>
    <p>Click on <strong>Releases </strong>then click <strong>Create Release</strong>. After this you can click the <strong>Create Package </strong>button.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/create-release.png" />

    <p>BuildMaster will now run the build plan we've set up and allow you to view any details of the process.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/run-build-plan.png" />

    <p>From here we can run the rest of the pipeline simply by clicking <strong>Deploy</strong> in each successive stage.</p>

    <img class="screenshot" src="/resources/tutorials/bm-gitlab-operations/deploy.png" />

    <p>You can further verify that the deployment was successful by checking the drive used when setting up the deployment plan.</p>















</body>
</html>