<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Managing build and deployment pipelines for projects in a Git repository</title>
    <meta name="keywords" content="buildmaster, git, github, continuous integration, entry-user" />
      <meta name="include-client-resources" content="fancybox131" />
    <meta name="product-name" content="BuildMaster" />
</head>
<body>
        <div class="intro">
        <p>
            BuildMaster is an application release automation tool. In this tutorial, we'll be building a Build Artifact within BuildMaster using an outside repository. In this case, we'll be using GitHub as our repository for an application called <i>Accounts</i>.
        </p>
            <p>
                If you'd like to follow along step-by-step, you can use a personal project repository. For this tutorial, we will call this repository <strong>Accounts</strong>.
            </p>
       <hr />
    </div>
    
    
    <h2 id="git-setup">Git Installation and Setup</h2>
    <p>&nbsp;</p>
    <h3 class="step-1">Step 1: Install and Configure Extensions</h3>
    
    <p>Go to the Administration page by clicking the gear symbol in the upper left-hand corner and then click the on <strong>Extensions</strong>.</p>
    
    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/extensions.png" />

    <p>
        For this tutorial we will be installing the <strong>Git</strong> extension. Scroll down the extensions page and install the extension.
    </p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/den-git.png" />

    <p>After the extensions are installed, BuildMaster will automatically restart, and the Git plugin will now be in the Up-to-Date Extensions.</p>

    <p>Back on the Admin page, click <strong>Resource Credentials</strong>, and then click the <strong>Create Credential</strong> button. A window will pop up, asking you to select a credential type, select <strong>Git</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/git-credential.png" />

    <p>We'll create a Git resource credential by filling out appropriate fields like<i> Repository URL, User name and Password</i>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/create-credential.png" />
    <p>&nbsp;</p>
    <h3 id="step-2">Step 2: Create an Application</h3>
    
    <p>Click on <strong>Applications</strong>, then click the <strong>Create Application</strong> button. This will bring up a window, where you will set the name to <strong>Accounts</strong>. When creating the application, the <i>Integration</i>, <i>Testing</i>, and <i>Production</i> environments will be added by default as the initial pipeline. When finished, click <strong>Create</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/create-application.png" />

    <p>&nbsp;</p>
    <h3 id="step-3">Step 3: Edit Deployment Plan</h3>
    <p>Go to the <strong>Plans</strong> tab, then click on <strong>Deploy Accounts</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/deploy-accounts.png" />

    <p>BuildMaster has automatically created a simple deployment plan by default. The plan doesn't do much, but we can edit it so that it will deploy the artifact that we'll import through the pipeline.</p>
    <p>Edit the General Block at the top with a short description of what the plan will do and set a server for the plan to be run on. Note that you can also target environments and servers to execute operations on from the pipeline stage, but for this tutorial, we'll just set it here.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/edit-general-block.png" />

    <p>The two default actions in the plan can be deleted and we will replace them by dragging a <strong>Deploy Artifact</strong> operation into the edited General Block. Set the Artifact name to <strong>Websites</strong>, and the Target directory to <strong>C:\Websites\$EnvironmentName\Accounts</strong>. Using $EnvironmentName will create a new folder for each environment that the application is deployed to and demonstrates one way to generalize a deployment plan for use in multiple environments.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/deploy-artifact-operation.png" />
    <p>&nbsp;</p>
    <h3 id="step-4">Step 4: Create a New Build Plan</h3>
    
    <p>Create a plan by clicking the <strong>Create Plan</strong> button and name the plan <strong>Build Accounts Website.</strong></p>
    <p>First, add a <i>General Block</i> with a short description, like "Build Accounts Website."</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/create-plan.png" />

    <p>Next, we'll add a <strong>Get Source from Git Repository</strong> operation that will pull the latest files from a Git repository and store them in a temporary workspace called <i>$WorkingDirectory</i>. We'll use the Git resource credential we've already created.</p>

    <p>We should capture the GitCommit into a release variable similar to the TFS build number.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/git-repo-operation.png" />

    <p>Let's also store the commit ID into a variable. This can be done on the Advanced tab of this operation.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/commit-id.png" />

    <p>Now, we'll add a <strong>Set Release Variable</strong> operation, where you can add a build variable name and value. For this project we will just be setting the value to commitID (where the commit hash was previously stored) in order to store the commit ID within this release variable.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/set-release-variable.png" />

    <p>You can also add a tag to the most recent commit ID by adding a <strong>Tag Git Source</strong> operation.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/tag-git-source.png" />

    <p>Now we are prepared to build our <strong>Accounts </strong>web application simply by adding a <strong>Build MSBuild Project</strong>. Here you can specify a project or solution file, configuration and target directory.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/build-accounts-app.png" />

    <p>To turn this build into an Artifact, add a <strong>Create Artifact</strong> operation. Name the artifact <i>"Websites"</i> because that is the artifact that we used in the deployment plan we first created.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/create-artifact.png" />
    <p>
        If done correctly the plan will look like the image below:
    </p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/visual-view.png" />

    <p>And in text mode:</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/text-view.png" />
    <p>&nbsp;</p>
    <h3 id="step-5">Step 5: Edit Application Pipeline and Set Build Plan</h3>
    
    <p>When we created the application, a simple pipeline was also created which we can now edit. Click on <strong>Accounts </strong>and then click on the <strong>Pipelines </strong>tab. Finally click on the <strong>Add Stage</strong> button.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/accounts-pipeline.png" />

    <p>Set Name to <strong>Build</strong>, then set <strong>Pipeline position to 0</strong> and Click <strong>Save Stage</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/create-pipeline-stage.png" />

    <p>We'll add a target to the Build stage using our build plan (Build Accounts) and our local server.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/add-target.png" />
    <p>&nbsp;</p>
    <h3 id="step-6">Step 6: Creating a Release and Deploying</h3>
    
    <p>After setting the build target, we will create a <strong>Release</strong> that builds and deploys this artifact. The release number can be anything, but defaults to 0.0.0.</p>
    <p>Click on <strong>Releases </strong>then click <strong>Create Release</strong>. After this, you can click the <strong>Create Package </strong>button.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/create-release.png" />

    <p>BuildMaster will now run the build plan we've set up and create the artifact. We can see that there has been an artifact created called <strong>Websites</strong>.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/website-artifact.png" />

    <p>You can now run the artifact through the rest of the pipeline simply by clicking <strong>Deploy </strong>in each successive stage. Of course, you can also configure <a href="/support/documentation/buildmaster/core-concepts/pipelines" target="_blank"><i>gates</i></a>, <a href="/support/documentation/buildmaster/global-components/event-listeners" target="_blank"><i>listeners</i></a>, or <a href="/support/documentation/buildmaster/administration/security" target="_blank"><i>permissions</i></a> to ensure that a proper process is followed.</p>

    <img class="screenshot" src="/resources/tutorials/bm-manage-pipelines-git/deploy.png" />

    <p>You can further verify that the deployment was successful by checking the drive used when setting up the deployment plan. There will be three folders under <i>/Website</i> -one for <i>Integration, Testing</i>, and <i>Production</i>, all with the deployed files.</p>



















</body>
</html>