<!DOCTYPE html []>
<html>
  <head>
    <meta name="id" content="1153" />
    <meta name="description" content="" />
    <meta name="keywords" content="proget, upgrade-notes" />
    <title>Upgrading from ProGet v2 and v3</title>
  </head>
  <body>
    <p>
            ProGet v2 is <b>retired</b> and v3 is <b>semi-retired</b>. We will only provide very limited product support for v3, but we will no longer ship any maintenance releases, patches, or other changes (including for security vulnerabilities). This means you should upgrade as soon as possible.
    </p>
    <p>
            Most of the releases in v2 and v3 were additive and had minimal upgrade risk, and this document aggregates noteworthy <a href="/proget/versions">upgrade notes</a> from the older versions. 
    </p>
    <p class="info">
            <b>Upgrade directly to the latest v5 of ProGet</b>. This is the simplest and least risky option. 
        </p>
  
    <h2>Manual Migration Option</h2>
    <p>Instead of migrating, you could always do a “manual” migration. This isn’t necessary, but this might be an opportunity for a “fresh start” and reorganizing your feeds.</p>
   
    <p>
            The manual migration route involves setting up a separate instance of ProGet, creating a new set of feeds/users/permissions, and then using the <a href="">drop path</a> functionality to import packages by copying them from the package store of the old instance to the drop path of the new feed. Do not point directly to the feed package store.
    </p>
    <p>
            The disadvantage this approach, in addition to being more time consuming and a more of a hassle, is that this will import both local and cached packages. As such, you could clear the feed cache before doing the migration. 
    </p>
    
      <h2>Upgrading from 3.3 and Earlier: Legacy NuGet Feeds</h2>
    <p>ProGet 3.3 introduced a new, more efficient method for storing NuGet packages. After upgrading, you will need to migrate your existing feeds to the new format. 

    </p>
    <h3>Step 1: Create Feed Packages</h3>
    
    <p>
        Copy all of the feed packages to a new directory that the ProGet Service has read/write/delete access to. 
    </p>
    <h3>
        Step 2: Create a New Feed
    </h3>
    <p>
        Create a new NuGet/Chocolatey feed and set the Bulk Import Drop Path to the path of the directory containing the copied package files from step 1.
    </p>
    <h3>Step 3: Wait</h3>
    <p>
        The packages should start being imported from the copied directory shortly after you click <em>Save</em>. After each package has been imported, it will be deleted from the drop path. When the directory is empty, move on to the next step. 
    </p>
    <h3>
        Step 4: Verify
    </h3>
    <p>
        Browse the new feed in ProGet and make sure that all of the packages are there and everything looks correct. 
    </p>
    <h3>
        Step 5: Remove and Replace Old Feed
    </h3>
    <p> Delete the old feed, and rename the new feed to the old feed's name. Consumers should now be able to access the packages.

    </p>
    <h2>
        Upgrading to v5
    </h2>
    <p>
    Prior to upgrading to v5, make sure to review the upgrade notes for 4.0 and 5.0; those have additonal considers that my impact you.
    </p>
    <ul>
        <li><a href="/support/kb/1111">KB #1111: Upgrade Notes for ProGet 4.0 </a></li>
        <li><a href="/support/kb/1150"> KB#1150: Upgrade Notes for ProGet 5.0 </a></li>
    </ul>
    <p>
        After backing up, you can simply download and run the latest v5 installer. 
    </p>


            <p class="info">
                    In ProGet 3.8, the project-based ProGet Deploy feeds were converted to regular NuGet feeds, and all related deployment history, powershell scripts, servers configurations, etc. were removed. No one really used this feature, anyways, so it almost certainly won’t impact you. 
                </p>
           
  </body>
</html>